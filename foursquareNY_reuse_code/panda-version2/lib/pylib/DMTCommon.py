# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DMTCommon')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DMTCommon')
    _DMTCommon = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DMTCommon', [dirname(__file__)])
        except ImportError:
            import _DMTCommon
            return _DMTCommon
        try:
            _mod = imp.load_module('_DMTCommon', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DMTCommon = swig_import_helper()
    del swig_import_helper
else:
    import _DMTCommon
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["REM"] = _DMTCommon.Logger_REM_set
    __swig_getmethods__["REM"] = _DMTCommon.Logger_REM_get
    if _newclass:
        REM = _swig_property(_DMTCommon.Logger_REM_get, _DMTCommon.Logger_REM_set)
    TRACE = _DMTCommon.Logger_TRACE
    DEBUG = _DMTCommon.Logger_DEBUG
    VERBOSEMODE = _DMTCommon.Logger_VERBOSEMODE
    INFO = _DMTCommon.Logger_INFO
    WARN = _DMTCommon.Logger_WARN
    ERROR = _DMTCommon.Logger_ERROR
    FATAL = _DMTCommon.Logger_FATAL
    if _newclass:
        Instance = staticmethod(_DMTCommon.Logger_Instance)
    else:
        Instance = _DMTCommon.Logger_Instance

    def selectLevel(self, level):
        return _DMTCommon.Logger_selectLevel(self, level)

    def getLevel(self):
        return _DMTCommon.Logger_getLevel(self)

    def LOG(self, level):
        return _DMTCommon.Logger_LOG(self, level)

    def END_LOG(self, level):
        return _DMTCommon.Logger_END_LOG(self, level)
Logger_swigregister = _DMTCommon.Logger_swigregister
Logger_swigregister(Logger)
cvar = _DMTCommon.cvar

def Logger_Instance(*args):
    return _DMTCommon.Logger_Instance(*args)
Logger_Instance = _DMTCommon.Logger_Instance

class DMT_Error(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMT_Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMT_Error, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _DMTCommon.new_DMT_Error()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_DMT_Error
    __del__ = lambda self: None
DMT_Error_swigregister = _DMTCommon.DMT_Error_swigregister
DMT_Error_swigregister(DMT_Error)

class DMT_DataStructure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMT_DataStructure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMT_DataStructure, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _DMTCommon.new_DMT_DataStructure()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_DMT_DataStructure
    __del__ = lambda self: None
DMT_DataStructure_swigregister = _DMTCommon.DMT_DataStructure_swigregister
DMT_DataStructure_swigregister(DMT_DataStructure)

class DMT_Set(DMT_DataStructure):
    __swig_setmethods__ = {}
    for _s in [DMT_DataStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMT_Set, name, value)
    __swig_getmethods__ = {}
    for _s in [DMT_DataStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMT_Set, name)
    __repr__ = _swig_repr

    def __init__(self, bufsize=255):
        this = _DMTCommon.new_DMT_Set(bufsize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_DMT_Set
    __del__ = lambda self: None

    def reset(self):
        return _DMTCommon.DMT_Set_reset(self)

    def getLen(self):
        return _DMTCommon.DMT_Set_getLen(self)

    def getItem(self, i):
        return _DMTCommon.DMT_Set_getItem(self, i)

    def setItem(self, i, val):
        return _DMTCommon.DMT_Set_setItem(self, i, val)

    def append(self, i):
        return _DMTCommon.DMT_Set_append(self, i)

    def sort(self):
        return _DMTCommon.DMT_Set_sort(self)
DMT_Set_swigregister = _DMTCommon.DMT_Set_swigregister
DMT_Set_swigregister(DMT_Set)

class DMT_Rule(DMT_DataStructure):
    __swig_setmethods__ = {}
    for _s in [DMT_DataStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMT_Rule, name, value)
    __swig_getmethods__ = {}
    for _s in [DMT_DataStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMT_Rule, name)
    __repr__ = _swig_repr

    def __init__(self, head, tail):
        this = _DMTCommon.new_DMT_Rule(head, tail)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_DMT_Rule
    __del__ = lambda self: None

    def reset(self):
        return _DMTCommon.DMT_Rule_reset(self)

    def getHead(self):
        return _DMTCommon.DMT_Rule_getHead(self)

    def getTail(self):
        return _DMTCommon.DMT_Rule_getTail(self)

    def setSupport(self, s):
        return _DMTCommon.DMT_Rule_setSupport(self, s)

    def getSupport(self):
        return _DMTCommon.DMT_Rule_getSupport(self)

    def setConfidence(self, c):
        return _DMTCommon.DMT_Rule_setConfidence(self, c)

    def getConfidence(self):
        return _DMTCommon.DMT_Rule_getConfidence(self)

    def sort(self):
        return _DMTCommon.DMT_Rule_sort(self)
DMT_Rule_swigregister = _DMTCommon.DMT_Rule_swigregister
DMT_Rule_swigregister(DMT_Rule)

class DMT_SuppSet(DMT_Set):
    __swig_setmethods__ = {}
    for _s in [DMT_Set]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMT_SuppSet, name, value)
    __swig_getmethods__ = {}
    for _s in [DMT_Set]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMT_SuppSet, name)
    __repr__ = _swig_repr

    def __init__(self, bufsize=255):
        this = _DMTCommon.new_DMT_SuppSet(bufsize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_DMT_SuppSet
    __del__ = lambda self: None

    def getSupport(self):
        return _DMTCommon.DMT_SuppSet_getSupport(self)

    def setSupport(self, val):
        return _DMTCommon.DMT_SuppSet_setSupport(self, val)

    def reset(self):
        return _DMTCommon.DMT_SuppSet_reset(self)
DMT_SuppSet_swigregister = _DMTCommon.DMT_SuppSet_swigregister
DMT_SuppSet_swigregister(DMT_SuppSet)

class DMT_ExtSuppSet(DMT_SuppSet):
    __swig_setmethods__ = {}
    for _s in [DMT_SuppSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMT_ExtSuppSet, name, value)
    __swig_getmethods__ = {}
    for _s in [DMT_SuppSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMT_ExtSuppSet, name)
    __repr__ = _swig_repr

    def __init__(self, bufsize=255, trbufsize=10240):
        this = _DMTCommon.new_DMT_ExtSuppSet(bufsize, trbufsize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_DMT_ExtSuppSet
    __del__ = lambda self: None

    def reset(self):
        return _DMTCommon.DMT_ExtSuppSet_reset(self)

    def setSupport(self, val):
        return _DMTCommon.DMT_ExtSuppSet_setSupport(self, val)

    def getTransaction(self, i):
        return _DMTCommon.DMT_ExtSuppSet_getTransaction(self, i)

    def setTransaction(self, i, val):
        return _DMTCommon.DMT_ExtSuppSet_setTransaction(self, i, val)

    def getTransactionsLen(self):
        return _DMTCommon.DMT_ExtSuppSet_getTransactionsLen(self)

    def appendTransaction(self, i):
        return _DMTCommon.DMT_ExtSuppSet_appendTransaction(self, i)
DMT_ExtSuppSet_swigregister = _DMTCommon.DMT_ExtSuppSet_swigregister
DMT_ExtSuppSet_swigregister(DMT_ExtSuppSet)

class DMT_Transaction(DMT_Set):
    __swig_setmethods__ = {}
    for _s in [DMT_Set]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMT_Transaction, name, value)
    __swig_getmethods__ = {}
    for _s in [DMT_Set]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMT_Transaction, name)
    __repr__ = _swig_repr

    def __init__(self, bufsize=255):
        this = _DMTCommon.new_DMT_Transaction(bufsize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_DMT_Transaction
    __del__ = lambda self: None

    def reset(self):
        return _DMTCommon.DMT_Transaction_reset(self)

    def getTid(self):
        return _DMTCommon.DMT_Transaction_getTid(self)

    def setTid(self, tid):
        return _DMTCommon.DMT_Transaction_setTid(self, tid)
DMT_Transaction_swigregister = _DMTCommon.DMT_Transaction_swigregister
DMT_Transaction_swigregister(DMT_Transaction)

class DMT_Labeled_Transaction(DMT_Transaction):
    __swig_setmethods__ = {}
    for _s in [DMT_Transaction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMT_Labeled_Transaction, name, value)
    __swig_getmethods__ = {}
    for _s in [DMT_Transaction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMT_Labeled_Transaction, name)
    __repr__ = _swig_repr

    def __init__(self, bufsize=255):
        this = _DMTCommon.new_DMT_Labeled_Transaction(bufsize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_DMT_Labeled_Transaction
    __del__ = lambda self: None

    def reset(self):
        return _DMTCommon.DMT_Labeled_Transaction_reset(self)

    def getClass(self):
        return _DMTCommon.DMT_Labeled_Transaction_getClass(self)

    def setClass(self, c):
        return _DMTCommon.DMT_Labeled_Transaction_setClass(self, c)
DMT_Labeled_Transaction_swigregister = _DMTCommon.DMT_Labeled_Transaction_swigregister
DMT_Labeled_Transaction_swigregister(DMT_Labeled_Transaction)

class DMT_Weighted_Transaction(DMT_Transaction):
    __swig_setmethods__ = {}
    for _s in [DMT_Transaction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMT_Weighted_Transaction, name, value)
    __swig_getmethods__ = {}
    for _s in [DMT_Transaction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMT_Weighted_Transaction, name)
    __repr__ = _swig_repr

    def __init__(self, bufsize=255):
        this = _DMTCommon.new_DMT_Weighted_Transaction(bufsize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_DMT_Weighted_Transaction
    __del__ = lambda self: None

    def reset(self):
        return _DMTCommon.DMT_Weighted_Transaction_reset(self)

    def getWeight(self, i):
        return _DMTCommon.DMT_Weighted_Transaction_getWeight(self, i)

    def setWeight(self, i, w):
        return _DMTCommon.DMT_Weighted_Transaction_setWeight(self, i, w)

    def append(self, i, w):
        return _DMTCommon.DMT_Weighted_Transaction_append(self, i, w)
DMT_Weighted_Transaction_swigregister = _DMTCommon.DMT_Weighted_Transaction_swigregister
DMT_Weighted_Transaction_swigregister(DMT_Weighted_Transaction)

class DMT_Labeled_Weighted_Transaction(DMT_Labeled_Transaction, DMT_Weighted_Transaction):
    __swig_setmethods__ = {}
    for _s in [DMT_Labeled_Transaction, DMT_Weighted_Transaction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMT_Labeled_Weighted_Transaction, name, value)
    __swig_getmethods__ = {}
    for _s in [DMT_Labeled_Transaction, DMT_Weighted_Transaction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMT_Labeled_Weighted_Transaction, name)
    __repr__ = _swig_repr

    def __init__(self, bufsize=255):
        this = _DMTCommon.new_DMT_Labeled_Weighted_Transaction(bufsize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_DMT_Labeled_Weighted_Transaction
    __del__ = lambda self: None

    def reset(self):
        return _DMTCommon.DMT_Labeled_Weighted_Transaction_reset(self)
DMT_Labeled_Weighted_Transaction_swigregister = _DMTCommon.DMT_Labeled_Weighted_Transaction_swigregister
DMT_Labeled_Weighted_Transaction_swigregister(DMT_Labeled_Weighted_Transaction)

class NullModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NullModel, name)
    __repr__ = _swig_repr

    def __init__(self, rowSums, colSums):
        this = _DMTCommon.new_NullModel(rowSums, colSums)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def probability(self, row, col):
        return _DMTCommon.NullModel_probability(self, row, col)

    def logProbability(self, *args):
        return _DMTCommon.NullModel_logProbability(self, *args)

    def logProbabilityTransaction(self, row, cols):
        return _DMTCommon.NullModel_logProbabilityTransaction(self, row, cols)

    def minLogProbabilityTransaction(self, row, cols):
        return _DMTCommon.NullModel_minLogProbabilityTransaction(self, row, cols)
    __swig_setmethods__["muq"] = _DMTCommon.NullModel_muq_set
    __swig_getmethods__["muq"] = _DMTCommon.NullModel_muq_get
    if _newclass:
        muq = _swig_property(_DMTCommon.NullModel_muq_get, _DMTCommon.NullModel_muq_set)
    __swig_setmethods__["lambdaq"] = _DMTCommon.NullModel_lambdaq_set
    __swig_getmethods__["lambdaq"] = _DMTCommon.NullModel_lambdaq_get
    if _newclass:
        lambdaq = _swig_property(_DMTCommon.NullModel_lambdaq_get, _DMTCommon.NullModel_lambdaq_set)
    __swig_setmethods__["rowSumsq"] = _DMTCommon.NullModel_rowSumsq_set
    __swig_getmethods__["rowSumsq"] = _DMTCommon.NullModel_rowSumsq_get
    if _newclass:
        rowSumsq = _swig_property(_DMTCommon.NullModel_rowSumsq_get, _DMTCommon.NullModel_rowSumsq_set)
    __swig_setmethods__["colSumsq"] = _DMTCommon.NullModel_colSumsq_set
    __swig_getmethods__["colSumsq"] = _DMTCommon.NullModel_colSumsq_get
    if _newclass:
        colSumsq = _swig_property(_DMTCommon.NullModel_colSumsq_get, _DMTCommon.NullModel_colSumsq_set)
    __swig_setmethods__["rowIndices"] = _DMTCommon.NullModel_rowIndices_set
    __swig_getmethods__["rowIndices"] = _DMTCommon.NullModel_rowIndices_get
    if _newclass:
        rowIndices = _swig_property(_DMTCommon.NullModel_rowIndices_get, _DMTCommon.NullModel_rowIndices_set)
    __swig_setmethods__["colIndices"] = _DMTCommon.NullModel_colIndices_set
    __swig_getmethods__["colIndices"] = _DMTCommon.NullModel_colIndices_get
    if _newclass:
        colIndices = _swig_property(_DMTCommon.NullModel_colIndices_get, _DMTCommon.NullModel_colIndices_set)
    __swig_setmethods__["nq"] = _DMTCommon.NullModel_nq_set
    __swig_getmethods__["nq"] = _DMTCommon.NullModel_nq_get
    if _newclass:
        nq = _swig_property(_DMTCommon.NullModel_nq_get, _DMTCommon.NullModel_nq_set)
    __swig_setmethods__["mq"] = _DMTCommon.NullModel_mq_set
    __swig_getmethods__["mq"] = _DMTCommon.NullModel_mq_get
    if _newclass:
        mq = _swig_property(_DMTCommon.NullModel_mq_get, _DMTCommon.NullModel_mq_set)
    __swig_destroy__ = _DMTCommon.delete_NullModel
    __del__ = lambda self: None
NullModel_swigregister = _DMTCommon.NullModel_swigregister
NullModel_swigregister(NullModel)


def DMT_wt2t(input_file, output_file):
    return _DMTCommon.DMT_wt2t(input_file, output_file)
DMT_wt2t = _DMTCommon.DMT_wt2t

def DMT_lwt2wt(input_file, output_file, classes_file=None):
    return _DMTCommon.DMT_lwt2wt(input_file, output_file, classes_file)
DMT_lwt2wt = _DMTCommon.DMT_lwt2wt

def DMT_lwt2t(input_file, output_file, classes_file=None):
    return _DMTCommon.DMT_lwt2t(input_file, output_file, classes_file)
DMT_lwt2t = _DMTCommon.DMT_lwt2t

def DMT_lwt_countLabels(input_file):
    return _DMTCommon.DMT_lwt_countLabels(input_file)
DMT_lwt_countLabels = _DMTCommon.DMT_lwt_countLabels

def DMT_t2lt(input_file, output_file):
    return _DMTCommon.DMT_t2lt(input_file, output_file)
DMT_t2lt = _DMTCommon.DMT_t2lt

def DMT_lt2lwt(input_file, output_file):
    return _DMTCommon.DMT_lt2lwt(input_file, output_file)
DMT_lt2lwt = _DMTCommon.DMT_lt2lwt

def DMT_t2sparsedbp(input_file, output_file):
    return _DMTCommon.DMT_t2sparsedbp(input_file, output_file)
DMT_t2sparsedbp = _DMTCommon.DMT_t2sparsedbp

def DMT_dbp2extsuppset(item_file, tran_file, output_file):
    return _DMTCommon.DMT_dbp2extsuppset(item_file, tran_file, output_file)
DMT_dbp2extsuppset = _DMTCommon.DMT_dbp2extsuppset

def DMT_checklenghts(a, b):
    return _DMTCommon.DMT_checklenghts(a, b)
DMT_checklenghts = _DMTCommon.DMT_checklenghts
class IO_Handler_Exception(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO_Handler_Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IO_Handler_Exception, name)
    __repr__ = _swig_repr

    def __init__(self, msg):
        this = _DMTCommon.new_IO_Handler_Exception(msg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMessage(self):
        return _DMTCommon.IO_Handler_Exception_getMessage(self)
    __swig_destroy__ = _DMTCommon.delete_IO_Handler_Exception
    __del__ = lambda self: None
IO_Handler_Exception_swigregister = _DMTCommon.IO_Handler_Exception_swigregister
IO_Handler_Exception_swigregister(IO_Handler_Exception)

class IO_Handler_Exception_EmptyLine(IO_Handler_Exception):
    __swig_setmethods__ = {}
    for _s in [IO_Handler_Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO_Handler_Exception_EmptyLine, name, value)
    __swig_getmethods__ = {}
    for _s in [IO_Handler_Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IO_Handler_Exception_EmptyLine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _DMTCommon.new_IO_Handler_Exception_EmptyLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_IO_Handler_Exception_EmptyLine
    __del__ = lambda self: None
IO_Handler_Exception_EmptyLine_swigregister = _DMTCommon.IO_Handler_Exception_EmptyLine_swigregister
IO_Handler_Exception_EmptyLine_swigregister(IO_Handler_Exception_EmptyLine)

class IO_Handler_Exception_Format(IO_Handler_Exception):
    __swig_setmethods__ = {}
    for _s in [IO_Handler_Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO_Handler_Exception_Format, name, value)
    __swig_getmethods__ = {}
    for _s in [IO_Handler_Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IO_Handler_Exception_Format, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _DMTCommon.new_IO_Handler_Exception_Format(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_IO_Handler_Exception_Format
    __del__ = lambda self: None
IO_Handler_Exception_Format_swigregister = _DMTCommon.IO_Handler_Exception_Format_swigregister
IO_Handler_Exception_Format_swigregister(IO_Handler_Exception_Format)

class IO_Handler_Exception_FileNotFound(IO_Handler_Exception):
    __swig_setmethods__ = {}
    for _s in [IO_Handler_Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO_Handler_Exception_FileNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [IO_Handler_Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IO_Handler_Exception_FileNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _DMTCommon.new_IO_Handler_Exception_FileNotFound(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_IO_Handler_Exception_FileNotFound
    __del__ = lambda self: None
IO_Handler_Exception_FileNotFound_swigregister = _DMTCommon.IO_Handler_Exception_FileNotFound_swigregister
IO_Handler_Exception_FileNotFound_swigregister(IO_Handler_Exception_FileNotFound)

class IO_Handler_Exception_WrongHandlerCode(IO_Handler_Exception):
    __swig_setmethods__ = {}
    for _s in [IO_Handler_Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO_Handler_Exception_WrongHandlerCode, name, value)
    __swig_getmethods__ = {}
    for _s in [IO_Handler_Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IO_Handler_Exception_WrongHandlerCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _DMTCommon.new_IO_Handler_Exception_WrongHandlerCode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DMTCommon.delete_IO_Handler_Exception_WrongHandlerCode
    __del__ = lambda self: None
IO_Handler_Exception_WrongHandlerCode_swigregister = _DMTCommon.IO_Handler_Exception_WrongHandlerCode_swigregister
IO_Handler_Exception_WrongHandlerCode_swigregister(IO_Handler_Exception_WrongHandlerCode)

class IO_Handler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO_Handler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IO_Handler, name)
    __repr__ = _swig_repr
    TR_ASCII_READER = _DMTCommon.IO_Handler_TR_ASCII_READER
    TR_ASCII_WRITER = _DMTCommon.IO_Handler_TR_ASCII_WRITER
    TR_BINARY_READER = _DMTCommon.IO_Handler_TR_BINARY_READER
    TR_BINARY_WRITER = _DMTCommon.IO_Handler_TR_BINARY_WRITER
    TR_ASCII_LABELED_READER = _DMTCommon.IO_Handler_TR_ASCII_LABELED_READER
    TR_ASCII_LABELED_WRITER = _DMTCommon.IO_Handler_TR_ASCII_LABELED_WRITER
    TR_ASCII_WEIGHTED_READER = _DMTCommon.IO_Handler_TR_ASCII_WEIGHTED_READER
    TR_ASCII_WEIGHTED_WRITER = _DMTCommon.IO_Handler_TR_ASCII_WEIGHTED_WRITER
    TR_BINARY_WEIGHTED_READER = _DMTCommon.IO_Handler_TR_BINARY_WEIGHTED_READER
    TR_BINARY_WEIGHTED_WRITER = _DMTCommon.IO_Handler_TR_BINARY_WEIGHTED_WRITER
    TR_ASCII_LABELED_WEIGHTED_READER = _DMTCommon.IO_Handler_TR_ASCII_LABELED_WEIGHTED_READER
    TR_ASCII_LABELED_WEIGHTED_WRITER = _DMTCommon.IO_Handler_TR_ASCII_LABELED_WEIGHTED_WRITER
    TR_BINARY_LABELED_WEIGHTED_READER = _DMTCommon.IO_Handler_TR_BINARY_LABELED_WEIGHTED_READER
    TR_BINARY_LABELED_WEIGHTED_WRITER = _DMTCommon.IO_Handler_TR_BINARY_LABELED_WEIGHTED_WRITER
    P_ASCII_WRITER = _DMTCommon.IO_Handler_P_ASCII_WRITER
    SSET_ASCII_READER = _DMTCommon.IO_Handler_SSET_ASCII_READER
    SSET_ASCII_WRITER = _DMTCommon.IO_Handler_SSET_ASCII_WRITER
    XSET_ASCII_READER = _DMTCommon.IO_Handler_XSET_ASCII_READER
    XSET_ASCII_WRITER = _DMTCommon.IO_Handler_XSET_ASCII_WRITER
    RULE_ASCII_WRITER = _DMTCommon.IO_Handler_RULE_ASCII_WRITER
    RULE_ASCII_READER = _DMTCommon.IO_Handler_RULE_ASCII_READER
    if _newclass:
        get_handler = staticmethod(_DMTCommon.IO_Handler_get_handler)
    else:
        get_handler = _DMTCommon.IO_Handler_get_handler

    def __init__(self, f):
        this = _DMTCommon.new_IO_Handler(f)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def read(self, *args):
        return _DMTCommon.IO_Handler_read(self, *args)

    def write(self, *args):
        return _DMTCommon.IO_Handler_write(self, *args)

    def eof(self):
        return _DMTCommon.IO_Handler_eof(self)

    def rew(self):
        return _DMTCommon.IO_Handler_rew(self)

    def close(self):
        return _DMTCommon.IO_Handler_close(self)

    def getNoTransactionsRead(self):
        return _DMTCommon.IO_Handler_getNoTransactionsRead(self)
    __swig_destroy__ = _DMTCommon.delete_IO_Handler
    __del__ = lambda self: None
IO_Handler_swigregister = _DMTCommon.IO_Handler_swigregister
IO_Handler_swigregister(IO_Handler)

def IO_Handler_get_handler(filename, format, append=False):
    return _DMTCommon.IO_Handler_get_handler(filename, format, append)
IO_Handler_get_handler = _DMTCommon.IO_Handler_get_handler

class Chronos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chronos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Chronos, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _DMTCommon.new_Chronos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def StartChronos(self):
        return _DMTCommon.Chronos_StartChronos(self)

    def StopChronos(self):
        return _DMTCommon.Chronos_StopChronos(self)

    def ReadChronos(self):
        return _DMTCommon.Chronos_ReadChronos(self)

    def ResetChronos(self):
        return _DMTCommon.Chronos_ResetChronos(self)

    def RestartChronos(self):
        return _DMTCommon.Chronos_RestartChronos(self)
    __swig_destroy__ = _DMTCommon.delete_Chronos
    __del__ = lambda self: None
Chronos_swigregister = _DMTCommon.Chronos_swigregister
Chronos_swigregister(Chronos)

# This file is compatible with both classic and new-style classes.


